# -*- coding: utf-8 -*-
"""ann.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gzKYjhaWh6bRB5oWJPFIAlK1oyPY8h-h

# Import libraries
"""

import pandas as pd
import tensorflow as tf
import numpy as np

"""## Import DataSet"""

dataset = pd.read_csv('Churn_Modelling.csv')
#we don't need first 3 columns as they are irrelevant for classification
x = dataset.iloc[:,3:-1].values
#only last column is for classification
y = dataset.iloc[:,-1].values

print(x)

"""##**Encoding Categorical Data**

Label Encoding the Gender Column
"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
x[:,2] = le.fit_transform(x[:,2])

print(x)

"""One hot encoding for "country" column"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers = [('encoder', OneHotEncoder(), [1])], remainder = 'passthrough') #applying one hot encoding in 1st column
x = np.array(ct.fit_transform(x))

print(x)

"""##Split DataSet in Training and Test dataset"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

"""##Feature Scaling

"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

"""## **Building ANN**"""

ann = tf.keras.models.Sequential()

"""Adding Input Layer and First Hidden Layer"""

ann.add(tf.keras.layers.Dense(6, activation = 'relu')) #this value of 6 we got from experiments

"""Add Second Hidden Layer"""

ann.add(tf.keras.layers.Dense(4, activation = 'relu')) #this value of 4 we got from experiments

"""Add Output Layer"""

ann.add(tf.keras.layers.Dense(1, activation = 'sigmoid')) #this value of 1, because this is single layer classification. either we get 0 or 1
#sigmoid gives better probability for binary outcomes

"""## **Training the ANN**

Compiling ANN
"""

ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics=['accuracy'])

"""Train the ANN"""

ann.fit(x_train,y_train,batch_size=32,epochs=100)

"""##Making the predictions and evaluating the model

Use our ANN model to predict if the customer with the following informations will leave the bank:

Geography: France

Credit Score: 600

Gender: Male

Age: 40 years old

Tenure: 3 years

Balance: $ 60000

Number of Products: 2

Does this customer have a credit card? Yes

Is this customer an Active Member: Yes

Estimated Salary: $ 50000

So, should we say goodbye to that customer?
"""

probability = ann.predict(sc.transform([[1,0,0,600,1,40,3,60000,2,1,1,50000]]))

print(probability)

"""##Predicting the Test set results"""

y_pred = ann.predict(x_test)
y_pred = y_pred > 0.5
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""##Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

